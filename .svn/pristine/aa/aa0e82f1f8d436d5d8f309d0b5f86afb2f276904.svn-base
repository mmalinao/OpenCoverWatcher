using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Console
{
    public class Watcher
    {        
        private readonly FileInfo _nunitExe;
        private readonly FileInfo _openCoverExe;
        private readonly FileInfo _reportGenExe;
        private readonly string[] _args;
        private readonly ISettings _settings;

        private DirectoryInfo _solutionDir;
        private IEnumerable<DirectoryInfo> _testDirs;
        private IEnumerable<DirectoryInfo> _configDirs; 

        private List<FileSystemWatcher> _watchers; 

        public Watcher(ISettings settings, string[] args)
        {
            _settings = settings;
            _args = args;

            _nunitExe = new FileInfo(_settings.GetNUnitPath());
            _openCoverExe = new FileInfo(_settings.GetOpenCoverPath());
            _reportGenExe = new FileInfo(_settings.GetReportGeneratorPath());

            // TODO: Need to find a way to package dependencies with install
            if (!_nunitExe.Exists || !_openCoverExe.Exists || !_reportGenExe.Exists)
                throw new UsageException("Executable dependencies could not be found");

        }

        public void Init()
        {
            System.Console.WriteLine(@"Initializing...");

            // 1. Verify Args
            if (_args.Length == 0)
                throw new UsageException("Error: No arguments provided");

            if (_args[0] == ConsoleArgs.Help)
                throw new UsageException(String.Empty);

            if (ConsoleArgs.AllRequired().Except(_args.ParseKeysFromArgs()).Any())
                throw new UsageException("Must specify all required arguments");

            // 2. Target Solution directory
            _solutionDir = new DirectoryInfo(_args.ParseValueFromArg(ConsoleArgs.TargetDir));

            if (!_solutionDir.Exists)
                throw new UsageException("Given target directory does not exist");
            
            // 3. Target all Test Projects inside Solution
            _testDirs = _solutionDir.GetDirectories().Where(subDir => subDir.Name.EndsWith(".Test")).ToList();

            if (!_testDirs.Any())
                throw new UsageException("No Test Projects found");

            // 4. Init FileSystemWatcher(s) to watch '\bin\<buildConfig>' folder(s) 
            //_configDirs = new List<DirectoryInfo>();
            var buildConfig = _args.ParseValueFromArg(ConsoleArgs.BuildConfig) ?? "Debug";

            _watchers = new List<FileSystemWatcher>();
            foreach (var testDir in _testDirs)
            {
                var bin = testDir.GetDirectories().Single(x => x.Name == "bin");
                var configFolder = bin.GetDirectories().Single(x => x.Name == buildConfig);

                if (!configFolder.Exists)
                    throw new UsageException(String.Format("Build config folder '{0}' does not exist", buildConfig));

                System.Console.WriteLine("Watching \"{0}\" for changes...", configFolder.FullName);

                var watcher = new FileSystemWatcher();
                watcher.Path = configFolder.FullName;
                watcher.Filter = testDir.Name + ".dll";
                watcher.NotifyFilter = NotifyFilters.LastWrite;

                watcher.Changed += Run;

                watcher.EnableRaisingEvents = true;

                _watchers.Add(watcher);
            }

            // 5. Wait for user to quit program
            System.Console.WriteLine(@"Press 'q' to quit program");
            while (System.Console.Read() != 'q') ;
        }

        public void Run(object source, FileSystemEventArgs e)
        {
            // 1. Stop watching for changes (avoid multiple calls)
            _watchers.ForEach(w => w.EnableRaisingEvents = false);            
            System.Console.WriteLine(@"Detected changes...");

            // 2. Create temprorary folder to hold targeted .dll & .pdb files
            var tempFolder = new DirectoryInfo("temp");

            if (tempFolder.Exists)
                tempFolder.Delete(true);

            tempFolder.Create();

            // 3. Create output folder to hold Code Coverage reporting
            var outputPath = _args.ParseValueFromArg(ConsoleArgs.OutputDir) ?? (_solutionDir.FullName + "\\CodeCoverage");
            var outputDir = new DirectoryInfo(outputPath);

            if (outputDir.Exists)
                outputDir.Delete(true);

            outputDir.Create();

            // 4. Copy all files based on given Build Configuration
            var buildConfig = _args.ParseValueFromArg(ConsoleArgs.BuildConfig) ?? "Debug";
            foreach (var dir in _testDirs)
            {
                var bin = dir.GetDirectories().Single(x => x.Name == "bin");
                var configFolder = bin.GetDirectories().Single(x => x.Name == buildConfig);

                var files = configFolder.GetFiles().ToList();
                foreach (var file in files)
                {
                    var fileinfo = new FileInfo(tempFolder.FullName + "\\" + file.Name);
                    if (!fileinfo.Exists)
                        file.CopyTo(fileinfo.FullName);
                }
            }

            // 5. Run OpenCover process
            System.Console.WriteLine(@"Running OpenCover process...");
            var openCoverProcess = new Process();

            var openCoverArgs = String.Format(
                //"-target:\"{0}\" -targetdir:\"{1}\" -targetargs:\"{2}\" -filter:\"{3}\" -output:\"{4}\" -excludebyfile:\"{5}\" -register:user",
                "-target:\"{0}\" -targetdir:\"{1}\" -targetargs:\"{2}\" -filter:\"{3}\" -output:\"{4}\" -register:user",
                _nunitExe.FullName,
                tempFolder.FullName,
                tempFolder.GetFiles("*.Test.dll").ToOpenCoverTargetArgs(),
                tempFolder.GetFiles("*.Test.dll").ToOpenCoverFilters(),
                outputDir.FullName + @"\coverage.xml"
                //@"C:\Dev\OpenCoverWatcher\Console\Properties\Resources.Designer.cs"
            );

            openCoverProcess.StartInfo.FileName = _openCoverExe.FullName;
            openCoverProcess.StartInfo.UseShellExecute = false;
            openCoverProcess.StartInfo.RedirectStandardOutput = true;
            openCoverProcess.StartInfo.Arguments = openCoverArgs;

            openCoverProcess.Start();

            var ccOutput = openCoverProcess.StandardOutput.ReadToEnd();            
            openCoverProcess.WaitForExit();

            System.Console.Write(ccOutput);

            // 6. Run ReportGenerator process
            System.Console.WriteLine(@"Running ReportGenerator process...");
            var reportGeneratorProcess = new Process();

            var reportGeneratorArgs = String.Format(
                "-reports:\"{0}\" -targetdir:\"{1}\"",
                outputDir.FullName + @"\coverage.xml",
                outputDir.FullName
            );

            reportGeneratorProcess.StartInfo.FileName = _reportGenExe.FullName;
            reportGeneratorProcess.StartInfo.UseShellExecute = false;
            reportGeneratorProcess.StartInfo.RedirectStandardOutput = true;
            reportGeneratorProcess.StartInfo.Arguments = reportGeneratorArgs;

            reportGeneratorProcess.Start();

            var rgOutput = reportGeneratorProcess.StandardOutput.ReadToEnd();
            reportGeneratorProcess.WaitForExit();

            System.Console.Write(rgOutput);

            // 7. Start watching for changes again
            tempFolder.Delete(true);
            _watchers.ForEach(w => w.EnableRaisingEvents = true);
        }



    }

    public static class Extensions
    {

        public static IEnumerable<string> ParseKeysFromArgs(this string[] args)
        {
            var keys = new List<string>();
            foreach (var arg in args)
                keys.AddRange(ConsoleArgs.All().Where(consoleArg => arg.ToLower().StartsWith(consoleArg)));

            return keys;
        }

        public static string ParseValueFromArg(this string[] args, string arg)
        {
            var value = args.SingleOrDefault(x => x.StartsWith(arg.ToLower() + ":"));
            
            if (value != null)
                value = value.Replace(arg.ToLower() + ":", String.Empty);

            return value;
        }

        public static string ToOpenCoverTargetArgs(this FileInfo[] files)
        {
            var str = String.Empty;
            files.ToList().ForEach(file => str += (file.Name + " "));
            return str;
        }

        public static string ToOpenCoverFilters(this FileInfo[] files)
        {
            var str = "";
            files.ToList().ForEach(file => str += String.Format("-[{0}]* ", file.Name.Replace(".dll", "")));
            str += " +[*]*";
            return str;
        }
    }

    public class UsageException : Exception
    {
        public UsageException(string message) : base(message)
        {            
        }
    }
}
